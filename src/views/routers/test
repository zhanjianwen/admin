// 路由配置
import * as React from 'react'
// import Admin from ''
// Route
import { BrowserRouter, Switch, Redirect } from 'react-router-dom'
const Routers: any = [{
  path: '/redirect',
  // component: Layout,
  hidden: true,
  children: [
    {
      path: '/redirect/:path*',
      component: () => import('../components/NotFound')
    }
  ]
},
{
  path: '/login',
  component: () => import('../pages/login/login'),
  hidden: true
},
{
  path: '/',
  // component: Layout,
  redirect: '/dashboard',
  children: [
    {
      path: 'dashboard',
      component: () => import('../pages/admin/admin'),
      name: 'Dashboard',
      meta: { title: 'Dashboard', icon: 'dashboard', requiresAuth: true }
    }
  ]
}]
// function CustomRoute(props: iRouterViewProps) {
// let path:string = props.location.pathname;

// props.beforeEnter && props.beforeEnter(path);

// // '/'-> '/home
// if (path === '/') return <Redirect to='/home' />

// // if can match
// let matchRoute: any = routerMap.find(item => {
//   let url = item.path;
//   // /detail/:id -> \\/detail\\/[^/+]
//   url = url.replace(/(\:.+)/g, "[^/]+").replace(/\//g, "\\/");

//   return new RegExp(`${url}(\\/|\\/)?$`, 'gi').test(path);
// });

// if (matchRoute) {
//   return <Route exact={!matchRoute.hasChild} path={matchRoute.path} component={matchRoute.component} />
// }
// return <Redirect to='/404' />
// }
// export default class AppRouter extends React.Component<iRouterViewProps /> {
//   render() {
//     return (
//       <BrowserRouter>
//         <Switch>
//         <CustomRoute {...props} />
//           {/* <Route path='/login' component={Login}></Route>
//           <Route path='/admin' component={Admin}></Route> */}
//         </Switch>
//       </BrowserRouter>
//     )
//   }
// }
interface iRouterViewProps {
  location?: any;
  // 进入路由之前的钩子
  beforeEnter?: (path: string) => void;
}
function CustomRoute(props: iRouterViewProps) {
  let path: string = props.location.pathname;
  let users: string = window.localStorage.users;
  console.log(Routers)
  console.log(path)
  if (path === '/' && !users) {
    return <Redirect to='/login' />
    // return <Route path='/login'></Route>
  }
  Routers.map((o: any) => {
    console.log(o)
  })
  // props.beforeEnter && props.beforeEnter(path);

  // // '/'-> '/home
  // if (path === '/') return <Redirect to='/home' />

  // // if can match
  // let matchRoute: any = routerMap.find(item => {
  //   let url = item.path;
  //   // /detail/:id -> \\/detail\\/[^/+]
  //   url = url.replace(/(\:.+)/g, "[^/]+").replace(/\//g, "\\/");

  //   return new RegExp(`${url}(\\/|\\/)?$`, 'gi').test(path);
  // });

  // if (matchRoute) {
  //   return <Route exact={!matchRoute.hasChild} path={matchRoute.path} component={matchRoute.component} />
  // }
  // return <Redirect to='/404' />
  return null
}

export default function (props: iRouterViewProps) {
  return (
    <BrowserRouter>
      <>
        <Switch>
          <CustomRoute {...props} />
        </Switch>
      </>
    </BrowserRouter>
  );
}
